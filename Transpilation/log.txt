FOUND : Expression : 
	{'ifExpression': 'IfExpression', 'letExpression': 'NoneType', 'logicalExpression': 'NoneType'}

	FOUND : IfExpression : 
		{'conditionExpression': 'Expression', 'thenExpression': 'Expression', 'elseExpression': 'Expression'}

		***thenExpression : 
		FOUND : Expression : 
			{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

			FOUND : LogicalExpression : 
				{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

				***leftRelationalExpression : 
				FOUND : RelationalExpression : 
					{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

					***leftAdditiveExpression : 
					FOUND : additiveExpression : 
						{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

						***leftMultiplicativeExpression : 
						FOUND : multiplicativeExpression : 
							{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

							***leftUnaryExpression : 
							FOUND : UnaryExpression : 
								{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

								***postfixExpression : 
								FOUND : PostfixExpression : 
									{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

									***primaryExpression : 
									FOUND : PrimaryExpression : 
										{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

										FOUND : PropertyCall : 
											{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

											***pathName : 
											FOUND : PathName : 
												{'names': ['something']}

		***conditionExpression : 
		FOUND : Expression : 
			{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

			FOUND : LogicalExpression : 
				{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

				***leftRelationalExpression : 
				FOUND : RelationalExpression : 
					{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

					***leftAdditiveExpression : 
					FOUND : additiveExpression : 
						{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

						***leftMultiplicativeExpression : 
						FOUND : multiplicativeExpression : 
							{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

							***leftUnaryExpression : 
							FOUND : UnaryExpression : 
								{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

								***postfixExpression : 
								FOUND : PostfixExpression : 
									{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

									***primaryExpression : 
									FOUND : PrimaryExpression : 
										{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

										FOUND : PropertyCall : 
											{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

											***pathName : 
											FOUND : PathName : 
												{'names': ['condition']}

		***elseExpression : 
		FOUND : Expression : 
			{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

			FOUND : LogicalExpression : 
				{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

				***leftRelationalExpression : 
				FOUND : RelationalExpression : 
					{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

					***leftAdditiveExpression : 
					FOUND : additiveExpression : 
						{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

						***leftMultiplicativeExpression : 
						FOUND : multiplicativeExpression : 
							{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

							***leftUnaryExpression : 
							FOUND : UnaryExpression : 
								{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

								***postfixExpression : 
								FOUND : PostfixExpression : 
									{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

									***primaryExpression : 
									FOUND : PrimaryExpression : 
										{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

										FOUND : PropertyCall : 
											{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

											***pathName : 
											FOUND : PathName : 
												{'names': ['somethingElse']}

FOUND : Expression : 
	{'ifExpression': 'NoneType', 'letExpression': 'LetExpression', 'logicalExpression': 'NoneType'}

	FOUND : LetExpression : 
		{'identifier': 'something', 'extra_identifiers': 'FormalParameterList', 'type': 'TypeSpecifier', 'initExpression': 'Expression', 'subExpression': 'Expression'}

		***initExpression : 
		FOUND : Expression : 
			{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

			FOUND : LogicalExpression : 
				{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

				***leftRelationalExpression : 
				FOUND : RelationalExpression : 
					{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

					***leftAdditiveExpression : 
					FOUND : additiveExpression : 
						{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

						***leftMultiplicativeExpression : 
						FOUND : multiplicativeExpression : 
							{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

							***leftUnaryExpression : 
							FOUND : UnaryExpression : 
								{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

								***postfixExpression : 
								FOUND : PostfixExpression : 
									{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

									***primaryExpression : 
									FOUND : PrimaryExpression : 
										{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

										FOUND : PropertyCall : 
											{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

											***pathName : 
											FOUND : PathName : 
												{'names': ['someValue']}

		***subExpression : 
		FOUND : Expression : 
			{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

			FOUND : LogicalExpression : 
				{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

				***leftRelationalExpression : 
				FOUND : RelationalExpression : 
					{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

					***leftAdditiveExpression : 
					FOUND : additiveExpression : 
						{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

						***leftMultiplicativeExpression : 
						FOUND : multiplicativeExpression : 
							{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

							***leftUnaryExpression : 
							FOUND : UnaryExpression : 
								{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

								***postfixExpression : 
								FOUND : PostfixExpression : 
									{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

									***primaryExpression : 
									FOUND : PrimaryExpression : 
										{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

										FOUND : PropertyCall : 
											{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

											***pathName : 
											FOUND : PathName : 
												{'names': ['nestedExpression']}

FOUND : Expression : 
	{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

	FOUND : LogicalExpression : 
		{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': ['and'], 'rightRelationalExpression': [<textx:oclGrammar.RelationalExpression instance at 0x239ef90>]}

		***leftRelationalExpression : 
		FOUND : RelationalExpression : 
			{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': '=', 'rightAdditiveExpression': 'AdditiveExpression'}

			***leftAdditiveExpression : 
			FOUND : additiveExpression : 
				{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': ['+'], 'rightMultiplicativeExpression': [<textx:oclGrammar.MultiplicativeExpression instance at 0x239ea10>]}

				***leftMultiplicativeExpression : 
				FOUND : multiplicativeExpression : 
					{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': ['*'], 'rightUnaryExpression': [<textx:oclGrammar.UnaryExpression instance at 0x239efb0>]}

					***leftUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'not', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': ['.'], 'propertyCall': [<textx:oclGrammar.PropertyCall instance at 0x239e7f0>]}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

								FOUND : PropertyCall : 
									{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

									***pathName : 
									FOUND : PathName : 
										{'names': ['name0']}

							FOUND : PropertyCall : 
								{'pathName': 'PathName', 'timeExpression': '@pre', 'qualifiers': 'Qualifiers', 'propertyCallParameters': 'PropertyCallParameters'}

								***pathName : 
								FOUND : PathName : 
									{'names': ['base', 'leaf']}

								***qualifiers : 
								FOUND : Qualifiers : 
									{'actualParameterList': 'ActualParameterList'}

									***actualParameterList : 
									FOUND : ActualParameterList : 
										{'expressions': [<textx:oclGrammar.Expression instance at 0x23a8ad0>, <textx:oclGrammar.Expression instance at 0x23a8a30>]}

										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : PropertyCall : 
																			{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																			***pathName : 
																			FOUND : PathName : 
																				{'names': ['qualifier1']}

										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : PropertyCall : 
																			{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																			***pathName : 
																			FOUND : PathName : 
																				{'names': ['qualifier2']}

								***propertyCallParameters : 
								FOUND : PropertyCallParameters : 
									{'declarator': 'Declarator', 'actualParameterList': 'ActualParameterList'}

									***declarator : 
									FOUND : Declarator : 
										{'names': ['name0', 'name1'], 'simpleTypeSpecifier': 'SimpleTypeSpecifier', 'extraName': 'extraName', 'extraTypeSpecifier': 'TypeSpecifier', 'expression': 'Expression'}

										***simpleTypeSpecifier : 
										FOUND : simpleTypeSpecifier : 
											{'pathName': 'PathName'}

											***pathName : 
											FOUND : PathName : 
												{'names': ['typeBase', 'typeLeaf']}

										***extraName : 
										***extraTypeSpecifier : 
										FOUND : typeSpecifier : 
											{'simpleTypeSpecifier': 'SimpleTypeSpecifier', 'collectionType': 'NoneType'}

											FOUND : simpleTypeSpecifier : 
												{'pathName': 'PathName'}

												***pathName : 
												FOUND : PathName : 
													{'names': ['Integer']}

										***expression : 
										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : PropertyCall : 
																			{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																			***pathName : 
																			FOUND : PathName : 
																				{'names': ['something']}

					***rightUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

								FOUND : PropertyCall : 
									{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

									***pathName : 
									FOUND : PathName : 
										{'names': ['multiple']}

				***rightMultiplicativeExpression : 
				FOUND : multiplicativeExpression : 
					{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

					***leftUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

								FOUND : PropertyCall : 
									{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

									***pathName : 
									FOUND : PathName : 
										{'names': ['sum']}

			***rightAdditiveExpression : 
			FOUND : additiveExpression : 
				{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

				***leftMultiplicativeExpression : 
				FOUND : multiplicativeExpression : 
					{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

					***leftUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

								FOUND : PropertyCall : 
									{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'Qualifiers', 'propertyCallParameters': 'NoneType'}

									***pathName : 
									FOUND : PathName : 
										{'names': ['aValue']}

									***qualifiers : 
									FOUND : Qualifiers : 
										{'actualParameterList': 'ActualParameterList'}

										***actualParameterList : 
										FOUND : ActualParameterList : 
											{'expressions': [<textx:oclGrammar.Expression instance at 0x23bfed0>, <textx:oclGrammar.Expression instance at 0x23bfef0>]}

											FOUND : Expression : 
												{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

												FOUND : LogicalExpression : 
													{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

													***leftRelationalExpression : 
													FOUND : RelationalExpression : 
														{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

														***leftAdditiveExpression : 
														FOUND : additiveExpression : 
															{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

															***leftMultiplicativeExpression : 
															FOUND : multiplicativeExpression : 
																{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

																***leftUnaryExpression : 
																FOUND : UnaryExpression : 
																	{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																	***postfixExpression : 
																	FOUND : PostfixExpression : 
																		{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																		***primaryExpression : 
																		FOUND : PrimaryExpression : 
																			{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																			FOUND : PropertyCall : 
																				{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																				***pathName : 
																				FOUND : PathName : 
																					{'names': ['aqualifier']}

											FOUND : Expression : 
												{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

												FOUND : LogicalExpression : 
													{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

													***leftRelationalExpression : 
													FOUND : RelationalExpression : 
														{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

														***leftAdditiveExpression : 
														FOUND : additiveExpression : 
															{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

															***leftMultiplicativeExpression : 
															FOUND : multiplicativeExpression : 
																{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

																***leftUnaryExpression : 
																FOUND : UnaryExpression : 
																	{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																	***postfixExpression : 
																	FOUND : PostfixExpression : 
																		{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																		***primaryExpression : 
																		FOUND : PrimaryExpression : 
																			{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																			FOUND : PropertyCall : 
																				{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																				***pathName : 
																				FOUND : PathName : 
																					{'names': ['anotherQualifier']}

		***rightRelationalExpression : 
		FOUND : RelationalExpression : 
			{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

			***leftAdditiveExpression : 
			FOUND : additiveExpression : 
				{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

				***leftMultiplicativeExpression : 
				FOUND : multiplicativeExpression : 
					{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

					***leftUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'NoneType', 'expression': 'Expression', 'ifExpression': 'NoneType'}

								***expression : 
								FOUND : Expression : 
									{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

									FOUND : LogicalExpression : 
										{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': ['or'], 'rightRelationalExpression': [<textx:oclGrammar.RelationalExpression instance at 0x23f5170>]}

										***leftRelationalExpression : 
										FOUND : RelationalExpression : 
											{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

											***leftAdditiveExpression : 
											FOUND : additiveExpression : 
												{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

												***leftMultiplicativeExpression : 
												FOUND : multiplicativeExpression : 
													{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

													***leftUnaryExpression : 
													FOUND : UnaryExpression : 
														{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

														***postfixExpression : 
														FOUND : PostfixExpression : 
															{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

															***primaryExpression : 
															FOUND : PrimaryExpression : 
																{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																FOUND : PropertyCall : 
																	{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																	***pathName : 
																	FOUND : PathName : 
																		{'names': ['aBoolean']}

										***rightRelationalExpression : 
										FOUND : RelationalExpression : 
											{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

											***leftAdditiveExpression : 
											FOUND : additiveExpression : 
												{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

												***leftMultiplicativeExpression : 
												FOUND : multiplicativeExpression : 
													{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

													***leftUnaryExpression : 
													FOUND : UnaryExpression : 
														{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

														***postfixExpression : 
														FOUND : PostfixExpression : 
															{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

															***primaryExpression : 
															FOUND : PrimaryExpression : 
																{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																FOUND : PropertyCall : 
																	{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																	***pathName : 
																	FOUND : PathName : 
																		{'names': ['anotherOne']}

FOUND : Expression : 
	{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

	FOUND : LogicalExpression : 
		{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

		***leftRelationalExpression : 
		FOUND : RelationalExpression : 
			{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

			***leftAdditiveExpression : 
			FOUND : additiveExpression : 
				{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

				***leftMultiplicativeExpression : 
				FOUND : multiplicativeExpression : 
					{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

					***leftUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'LiteralCollection', 'literal': 'NoneType', 'propertyCall': 'NoneType', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

								FOUND : LiteralCollection : 
									{'collectionKind': 'Set', 'collectionItems': [<textx:oclGrammar.CollectionItem instance at 0x23f54b0>, <textx:oclGrammar.CollectionItem instance at 0x23f5450>]}

									FOUND : CollectionItem : 
										{'startExpression': 'Expression', 'endExpression': 'Expression'}

										***startExpression : 
										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'Literal', 'propertyCall': 'NoneType', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : Literal : 
																			{'string': 'NoneType', 'number': 1, 'enumLiteral': 'NoneType'}

										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'NoneType', 'propertyCall': 'PropertyCall', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : PropertyCall : 
																			{'pathName': 'PathName', 'timeExpression': 'NoneType', 'qualifiers': 'NoneType', 'propertyCallParameters': 'NoneType'}

																			***pathName : 
																			FOUND : PathName : 
																				{'names': ['two']}

									FOUND : CollectionItem : 
										{'startExpression': 'Expression', 'endExpression': 'Expression'}

										***startExpression : 
										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'Literal', 'propertyCall': 'NoneType', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : Literal : 
																			{'string': 'three', 'number': 'NoneType', 'enumLiteral': 'NoneType'}

										FOUND : Expression : 
											{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

											FOUND : LogicalExpression : 
												{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

												***leftRelationalExpression : 
												FOUND : RelationalExpression : 
													{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

													***leftAdditiveExpression : 
													FOUND : additiveExpression : 
														{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

														***leftMultiplicativeExpression : 
														FOUND : multiplicativeExpression : 
															{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

															***leftUnaryExpression : 
															FOUND : UnaryExpression : 
																{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

																***postfixExpression : 
																FOUND : PostfixExpression : 
																	{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

																	***primaryExpression : 
																	FOUND : PrimaryExpression : 
																		{'literalCollection': 'NoneType', 'literal': 'Literal', 'propertyCall': 'NoneType', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

																		FOUND : Literal : 
																			{'string': 'NoneType', 'number': 'NoneType', 'enumLiteral': 'EnumLiteral'}

																			FOUND : EnumLiteral : 
																				{'names': ['enum', 'literal']}

FOUND : Expression : 
	{'ifExpression': 'NoneType', 'letExpression': 'NoneType', 'logicalExpression': 'LogicalExpression'}

	FOUND : LogicalExpression : 
		{'leftRelationalExpression': 'RelationalExpression', 'logicalOperator': [], 'rightRelationalExpression': []}

		***leftRelationalExpression : 
		FOUND : RelationalExpression : 
			{'leftAdditiveExpression': 'AdditiveExpression', 'relationalOperator': 'NoneType', 'rightAdditiveExpression': 'NoneType'}

			***leftAdditiveExpression : 
			FOUND : additiveExpression : 
				{'leftMultiplicativeExpression': 'MultiplicativeExpression', 'additiveOperator': [], 'rightMultiplicativeExpression': []}

				***leftMultiplicativeExpression : 
				FOUND : multiplicativeExpression : 
					{'leftUnaryExpression': 'UnaryExpression', 'multiplyOperator': [], 'rightUnaryExpression': []}

					***leftUnaryExpression : 
					FOUND : UnaryExpression : 
						{'unaryOperator': 'NoneType', 'postfixExpression': 'PostfixExpression'}

						***postfixExpression : 
						FOUND : PostfixExpression : 
							{'primaryExpression': 'PrimaryExpression', 'propertyCallOperator': [], 'propertyCall': []}

							***primaryExpression : 
							FOUND : PrimaryExpression : 
								{'literalCollection': 'NoneType', 'literal': 'Literal', 'propertyCall': 'NoneType', 'expression': 'NoneType', 'ifExpression': 'NoneType'}

								FOUND : Literal : 
									{'string': 'NoneType', 'number': 'NoneType', 'enumLiteral': 'EnumLiteral'}

									FOUND : EnumLiteral : 
										{'names': ['path', 'name']}

