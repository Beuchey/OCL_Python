File:
    (expressions=Expression)*
;




Expression:
      IfExpression
    | LetExpression
    | LogicalExpression
    | RelationalExpression
    | AdditiveExpression
    | MultiplicativeExpression
    | PostfixExpression
    | UnaryExpression
;




LetExpression:
    letKeyWord=LetKeyWord identifier=Name
    ( leftParenthesis=LeftParenthesis
        extra_identifiers=FormalParameterList
      rightParenthesis=RightParenthesis )?
    ( twoPoints=TwoPoints type=TypeSpecifier )?
    equal=Equal init=Expression
    inKeyWord=InKeyWord expression=Expression
;
LetKeyWord:
  "let"
;
LeftParenthesis:
  "("
;
RightParenthesis:
  ")"
;
TwoPoints:
  ":"
;
Equal:
  "="
;
InKeyWord:
  "in"
;
Name:
    /[a-z, A-Z, _]([a-z, A-Z, 0-9, _])*/
;
FormalParameterList:
    ( names=Name twoPoints=TwoPoints types=TypeSpecifier
    ("," names=Name twoPoints=TwoPoints types=TypeSpecifier )*
    )?
;
TypeSpecifier:
    type=SimpleTypeSpecifier | collectionType=CollectionType
;
SimpleTypeSpecifier:
    pathName=PathName
;
PathName:
    path=Name ( "::" path=Name )*
;
CollectionType:
    kind=CollectionKind
    leftParenthesis=LeftParenthesis type=SimpleTypeSpecifier rightParenthesis=RightParenthesis
;
CollectionKind:
    setKeyword=SetKeyword | bagKeyword=BagKeyword | sequenceKeyword=SequenceKeyword | collectionKeyword=CollectionKeyword
;
SetKeyword:
  "Set"
;
BagKeyword:
  "Bag"
;
SequenceKeyword:
  "Sequence"
;
CollectionKeyword:
  "Collection"
;




PostfixExpression:
    primaryExpression=PrimaryExpression
    ( postFixExpressionOperator=PostFixExpressionOperator call=PropertyCall )*
;
PrimaryExpression:
    literalCollection=LiteralCollection
    | literal=Literal
    | propertyCall=PropertyCall
    | leftParenthesis=LeftParenthesis expression=Expression rightParenthesis=RightParenthesis
    | ifExpression=IfExpression
;
LiteralCollection:
    kind=CollectionKind
    leftAcc=LeftAcc
      ( items=CollectionItem
          (comas=Coma items=CollectionItem )*
      )?
    rightAcc=RightAcc
;
LeftAcc:
  "{"
;
RightAcc:
  "}"
;
CollectionItem:
    start=Expression (".." end=Expression )?
;
Coma:
  ","
;
Literal:
    string=String
    | number=Number
    | enumLiteral=EnumLiteral
;
String:
    STRING
;
Number:
    NUMBER
;
EnumLiteral:
    paths=Name doubleTwoPoints=DoubleTwoPoint paths=Name ( doubleTwoPoints=DoubleTwoPoint paths=Name )*
;
DoubleTwoPoint:
  "::"
;
PropertyCall:
    property=PathName
    ( time_expression=TimeExpression )?
    ( qualifiers=Qualifiers )?
    ( parameters=PropertyCallParameters )?
;
TimeExpression:
    "@" "pre"
;
Qualifiers:
    leftHook=LeftHook list=ActualParameterList rightHook=RightHook
;
LeftHook:
  "["
;
RightHook:
  "]"
;
ActualParameterList:
    params=Expression ( "," params=Expression )*
;
PropertyCallParameters:
    leftParenthesis=LeftParenthesis ( declarator=Declarator )?
    ( parameters=ActualParameterList )? rightParenthesis=RightParenthesis
;
Declarator:
    id=Name ( coma=Coma extra_ids=Name )*
    ( twoPoints=TwoPoints type=SimpleTypeSpecifier )?
    ( pointComa=PointComa name=Name otherTwoPoints=TwoPoints otherType=TypeSpecifier equal=Equal
        expression=Expression
    )?
    "|"
;
PointComa:
  ";"
;
Name:
    /[a-zA-Z_]([a-zA-Z0-9_])*/
;
PostFixExpressionOperator:
  point=Point | arrow=Arrow
;
Point:
  "."
;
Arrow:
  "->"
;
UnaryExpression:
    ( operator=UnaryOperator) ? left=PostfixExpression
;
UnaryOperator:
    dash=Dash | notKeyword=NotKeyword
;
Dash:
  "-"
;
NotKeyword:
  "not"
;




LogicalExpression:
    left=RelationalExpression
    ( operator=LogicalOperator
    right=RelationalExpression
    )*
;
RelationalExpression:
    left=AdditiveExpression
    ( operator=RelationalOperator
    right=AdditiveExpression
    )?
;
AdditiveExpression:
    left=MultiplicativeExpression
    ( operator=AddOperator
    right=MultiplicativeExpression
    )*
;
MultiplicativeExpression:
    left=UnaryExpression
    ( operator=MultiplyOperator
    right=UnaryExpression
    )*
;
MultiplyOperator:
    star=Star | slash=Slash
;
Star:
  "*"
;
Slash:
  "/"
;
AddOperator:
    plus=Plus | minus=Minus
;
Plus:
  "+"
;
Minus:
  "-"
;
RelationalOperator:
    equal=Equal | gt=GT | lt=LT | ge=GE | le=LT | ne=NE
;
GT:
  ">"
;
LT:
  "<"
;
GE:
  ">="
;
LE:
  "<="
;
NE:
  "<>"
;
LogicalOperator:
    andKeyword=AndKeyword | orKeyword=OrKeyword | xorKeyword=XorKeyword | impliesKeyword=ImpliesKeyword
;
AndKeyword:
  "and"
;
OrKeyword:
  "or"
;
XorKeyword:
  "xor"
;
ImpliesKeyword:
  "implies"
;
