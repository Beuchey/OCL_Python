
    digraph xtext {
    fontname = "Bitstream Vera Sans"
    fontsize = 8
    node[
        shape=record,
        style=filled,
        fillcolor=aliceblue
    ]
    nodesep = 0.3
    edge[dir=black,arrowtail=empty]


39447360 -> 39484224[arrowtail=diamond, dir=both, headlabel="expressions 0..*"]
39447360[ label="{File|}"]

39484224[ label="{*Expression|}"]
39484224 -> 41898032 [dir=back]
39484224 -> 41898504 [dir=back]
39484224 -> 41899920 [dir=back]

41898504 -> 42085656[arrowtail=diamond, dir=both, headlabel="extra_identifiers "]
41898504 -> 41965928[arrowtail=diamond, dir=both, headlabel="type "]
41898504 -> 39484224[arrowtail=diamond, dir=both, headlabel="init_expression "]
41898504 -> 39484224[arrowtail=diamond, dir=both, headlabel="expression "]
41898504[ label="{LetExpression|+identifier:Name\l}"]

41898032 -> 39484224[arrowtail=diamond, dir=both, headlabel="conditionExpression "]
41898032 -> 39484224[arrowtail=diamond, dir=both, headlabel="thenBodyExpression "]
41898032 -> 39484224[arrowtail=diamond, dir=both, headlabel="elseBodyExpression "]
41898032[ label="{IfExpression|}"]

41899920 -> 41901336[arrowtail=diamond, dir=both, headlabel="leftRelationalExpression "]
41899920 -> 41901336[arrowtail=diamond, dir=both, headlabel="rightRelationalExpression 0..*"]
41899920[ label="{LogicalExpression|logicalOperator:list[LogicalOperator]\l}"]

41901336 -> 41935840[arrowtail=diamond, dir=both, headlabel="leftAdditiveExpression "]
41901336 -> 41935840[arrowtail=diamond, dir=both, headlabel="rightAdditiveExpression "]
41901336[ label="{RelationalExpression|+relationalOperator:RelationalOperator\l}"]

41935840 -> 41937256[arrowtail=diamond, dir=both, headlabel="leftMultiplicativeExpression "]
41935840 -> 41937256[arrowtail=diamond, dir=both, headlabel="rightMultiplicativeExpression 0..*"]
41935840[ label="{AdditiveExpression|addOperator:list[AddOperator]\l}"]

41937256 -> 41947184[arrowtail=diamond, dir=both, headlabel="leftUnaryExpression "]
41937256 -> 41947184[arrowtail=diamond, dir=both, headlabel="rightUnaryExpression 0..*"]
41937256[ label="{MultiplicativeExpression|multiplyOperator:list[MultiplyOperator]\l}"]

41947184 -> 41948600[arrowtail=diamond, dir=both, headlabel="postfixExpression "]
41947184[ label="{UnaryExpression|+unaryOperator:UnaryOperator\l}"]

41948600 -> 41950016[arrowtail=diamond, dir=both, headlabel="primaryExpression "]
41948600 -> 41964984[arrowtail=diamond, dir=both, headlabel="propertyCall 0..*"]
41948600[ label="{PostfixExpression|}"]

41950016 -> 41965456[arrowtail=diamond, dir=both, headlabel="literalCollection "]
41950016 -> 42009568[arrowtail=diamond, dir=both, headlabel="literal "]
41950016 -> 41964984[arrowtail=diamond, dir=both, headlabel="propertyCall "]
41950016 -> 39484224[arrowtail=diamond, dir=both, headlabel="epression "]
41950016 -> 41898032[arrowtail=diamond, dir=both, headlabel="ifExpression "]
41950016[ label="{PrimaryExpression|}"]

42084240[ label="{UnaryOperator|-\|not}"]

41965456 -> 41900864[arrowtail=diamond, dir=both, headlabel="collectionItems 0..*"]
41965456[ label="{LiteralCollection|+collectionKind:CollectionKind\l}"]

42065968[ label="{CollectionKind|Set\|Bag\|Sequence\|Collection}"]

41900864 -> 39484224[arrowtail=diamond, dir=both, headlabel="startExpression "]
41900864 -> 39484224[arrowtail=diamond, dir=both, headlabel="endExpression "]
41900864[ label="{CollectionItem|}"]

41964984 -> 41988616[arrowtail=diamond, dir=both, headlabel="pathName "]
41964984 -> 41966400[arrowtail=diamond, dir=both, headlabel="qualifiers "]
41964984 -> 42030048[arrowtail=diamond, dir=both, headlabel="propertyCallParameters "]
41964984[ label="{PropertyCall|+timeExpression:TimeExpression\l}"]

41966400 -> 41991448[arrowtail=diamond, dir=both, headlabel="actualParameterList "]
41966400[ label="{Qualifiers|}"]

41988616[ label="{PathName|names:list[Name]\l}"]

41990032[ label="{TimeExpression|@ pre}"]

41991448 -> 39484224[arrowtail=diamond, dir=both, headlabel="expressions 0..*"]
41991448[ label="{ActualParameterList|}"]

42009568 -> 42010984[arrowtail=diamond, dir=both, headlabel="enumLiteral "]
42009568[ label="{Literal|+string:String\l+number:Number\l}"]

42010984[ label="{EnumLiteral|+names:list[Name]\l}"]

42016816[ label="{Name|[a-zA-Z_]([a-zA-Z0-9_])*}"]

42018704[ label="{Number|FLOAT\|INT}"]

42020120[ label="{String|STRING}"]

42030048 -> 42011928[arrowtail=diamond, dir=both, headlabel="declarator "]
42030048 -> 41991448[arrowtail=diamond, dir=both, headlabel="actualParameterList "]
42030048[ label="{PropertyCallParameters|}"]

42011928 -> 41990976[arrowtail=diamond, dir=both, headlabel="simpleTypeSpecifier "]
42011928 -> 41965928[arrowtail=diamond, dir=both, headlabel="extraTypeSpecifier "]
42011928 -> 39484224[arrowtail=diamond, dir=both, headlabel="expression "]
42011928[ label="{Declarator|names:list[Name]\l+extraName:Name\l}"]

41990976 -> 41988616[arrowtail=diamond, dir=both, headlabel="pathName "]
41990976[ label="{SimpleTypeSpecifier|}"]

41965928 -> 41990976[arrowtail=diamond, dir=both, headlabel="simpleTypeSpecifier "]
41965928 -> 41948128[arrowtail=diamond, dir=both, headlabel="collectionType "]
41965928[ label="{TypeSpecifier|}"]

41948128 -> 41990976[arrowtail=diamond, dir=both, headlabel="simpleTypeSpecifier "]
41948128[ label="{CollectionType|+collectionKind:CollectionKind\l}"]

42031464[ label="{LogicalOperator|and\|or\|xor\|implies}"]

42067384[ label="{RelationalOperator|=\|\>\|\<\|\>=\|\<=\|\<\>}"]

42068800[ label="{AddOperator|+\|-}"]

42082824[ label="{MultiplyOperator|*\|/}"]

42085656 -> 41965928[arrowtail=diamond, dir=both, headlabel="typeSpecifiers 0..*"]
42085656[ label="{FormalParameterList|names:list[Name]\l}"]

39429560[ label="{ID|}"]

39430976[ label="{STRING|}"]

39445000[ label="{BOOL|}"]

39429088[ label="{INT|}"]

39446416[ label="{FLOAT|}"]

39447832[ label="{NUMBER|}"]
39447832 -> 39446416 [dir=back]
39447832 -> 39429088 [dir=back]

39453664[ label="{BASETYPE|}"]
39453664 -> 39447832 [dir=back]
39453664 -> 39445000 [dir=back]
39453664 -> 39429560 [dir=back]
39453664 -> 39430976 [dir=back]

39455080[ label="{*OBJECT|}"]
39455080 -> 39453664 [dir=back]


}
